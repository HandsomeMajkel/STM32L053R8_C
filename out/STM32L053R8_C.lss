
out/STM32L053R8_C.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <Reset_Handler>:
+-----------------------------------------------------------------------------+
| Initialize the process stack pointer
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =__process_stack_end
 8000000:	480f      	ldr	r0, [pc, #60]	; (8000040 <__default_low_level_init+0x4>)
	msr		PSP, r0
 8000002:	f380 8809 	msr	PSP, r0
+-----------------------------------------------------------------------------+
| Thread mode uses process stack (PSP). Thread mode on ARMv6-M is privileged.
+-----------------------------------------------------------------------------+
*/

	movs	r0, #CONTROL_ALTERNATE_STACK
 8000006:	2002      	movs	r0, #2
	msr		CONTROL, r0
 8000008:	f380 8814 	msr	CONTROL, r0
	isb
 800000c:	f3bf 8f6f 	isb	sy
+-----------------------------------------------------------------------------+
| Branch to low_level_init_0() function (.data and .bss are not initialized!)
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =low_level_init_0
 8000010:	480c      	ldr	r0, [pc, #48]	; (8000044 <__default_low_level_init+0x8>)
	blx		r0
 8000012:	4780      	blx	r0
+-----------------------------------------------------------------------------+
| Initialize .data section
+-----------------------------------------------------------------------------+
*/

	ldr		r1, =__data_init_start
 8000014:	490c      	ldr	r1, [pc, #48]	; (8000048 <__default_low_level_init+0xc>)
    ldr		r2, =__data_start
 8000016:	4a0d      	ldr	r2, [pc, #52]	; (800004c <__default_low_level_init+0x10>)
    ldr		r3, =__data_end
 8000018:	4b0d      	ldr	r3, [pc, #52]	; (8000050 <__default_low_level_init+0x14>)

	b		2f
 800001a:	e001      	b.n	8000020 <Reset_Handler+0x20>
1:	ldmia	r1!, {r0}
 800001c:	c901      	ldmia	r1!, {r0}
	stmia	r2!, {r0}
 800001e:	c201      	stmia	r2!, {r0}
2:	cmp		r2, r3
 8000020:	429a      	cmp	r2, r3
	bne		1b
 8000022:	d1fb      	bne.n	800001c <Reset_Handler+0x1c>
+-----------------------------------------------------------------------------+
| Zero-init .bss section
+-----------------------------------------------------------------------------+
*/

	movs	r0, #0
 8000024:	2000      	movs	r0, #0
	ldr		r1, =__bss_start
 8000026:	490b      	ldr	r1, [pc, #44]	; (8000054 <__default_low_level_init+0x18>)
	ldr		r2, =__bss_end
 8000028:	4a0b      	ldr	r2, [pc, #44]	; (8000058 <__default_low_level_init+0x1c>)

	b		2f
 800002a:	e000      	b.n	800002e <Reset_Handler+0x2e>
1:	stmia	r1!, {r0}
 800002c:	c101      	stmia	r1!, {r0}
2:	cmp		r1, r2
 800002e:	4291      	cmp	r1, r2
	bne		1b
 8000030:	d1fc      	bne.n	800002c <Reset_Handler+0x2c>
+-----------------------------------------------------------------------------+
| Branch to low_level_init_1() function
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =low_level_init_1
 8000032:	480a      	ldr	r0, [pc, #40]	; (800005c <__default_low_level_init+0x20>)
	blx		r0
 8000034:	4780      	blx	r0
+-----------------------------------------------------------------------------+
| Branch to main() with link
+-----------------------------------------------------------------------------+
*/

	ldr		r0, =main
 8000036:	480a      	ldr	r0, [pc, #40]	; (8000060 <__default_low_level_init+0x24>)
	blx		r0
 8000038:	4780      	blx	r0
+-----------------------------------------------------------------------------+
| On return - loop till the end of the world
+-----------------------------------------------------------------------------+
*/

	b		.
 800003a:	e7fe      	b.n	800003a <Reset_Handler+0x3a>

0800003c <__default_low_level_init>:
.thumb
.thumb_func
.global __default_low_level_init

__default_low_level_init:
	bx		lr
 800003c:	4770      	bx	lr
 800003e:	0000      	.short	0x0000
	ldr		r0, =__process_stack_end
 8000040:	20000800 	.word	0x20000800
	ldr		r0, =low_level_init_0
 8000044:	0800003d 	.word	0x0800003d
	ldr		r1, =__data_init_start
 8000048:	08000110 	.word	0x08000110
    ldr		r2, =__data_start
 800004c:	20000000 	.word	0x20000000
    ldr		r3, =__data_end
 8000050:	20000000 	.word	0x20000000
	ldr		r1, =__bss_start
 8000054:	20000000 	.word	0x20000000
	ldr		r2, =__bss_end
 8000058:	20000000 	.word	0x20000000
	ldr		r0, =low_level_init_1
 800005c:	0800003d 	.word	0x0800003d
	ldr		r0, =main
 8000060:	08000065 	.word	0x08000065

08000064 <main>:
* \details Call some static initialization functions and blink the led with
* frequency defined via count_max variable.
*//*-------------------------------------------------------------------------*/

int main(void)
{
 8000064:	b580      	push	{r7, lr}
 8000066:	b082      	sub	sp, #8
 8000068:	af00      	add	r7, sp, #0
	volatile uint32_t count, count_max = 50000;	// with core frequency ~50MHz this gives ~1.5Hz blinking frequency
 800006a:	4b19      	ldr	r3, [pc, #100]	; (80000d0 <main+0x6c>)
 800006c:	603b      	str	r3, [r7, #0]

	pll_start(CRYSTAL, FREQUENCY);			// start the PLL
 800006e:	4a19      	ldr	r2, [pc, #100]	; (80000d4 <main+0x70>)
 8000070:	4b19      	ldr	r3, [pc, #100]	; (80000d8 <main+0x74>)
 8000072:	0011      	movs	r1, r2
 8000074:	0018      	movs	r0, r3
 8000076:	f000 f833 	bl	80000e0 <pll_start>
	system_init();							// initialize other necessary elements
 800007a:	f000 f83b 	bl	80000f4 <system_init>

	GPIOA->MODER = (GPIOA->MODER & ~GPIO_MODER_MODE5) | GPIO_MODER_MODE5_0;
 800007e:	23a0      	movs	r3, #160	; 0xa0
 8000080:	05db      	lsls	r3, r3, #23
 8000082:	22a0      	movs	r2, #160	; 0xa0
 8000084:	05d2      	lsls	r2, r2, #23
 8000086:	6812      	ldr	r2, [r2, #0]
 8000088:	4914      	ldr	r1, [pc, #80]	; (80000dc <main+0x78>)
 800008a:	400a      	ands	r2, r1
 800008c:	2180      	movs	r1, #128	; 0x80
 800008e:	00c9      	lsls	r1, r1, #3
 8000090:	430a      	orrs	r2, r1
 8000092:	601a      	str	r2, [r3, #0]

	while (1)
	{
		for (count = 0; count < count_max; count++);	// delay
 8000094:	2300      	movs	r3, #0
 8000096:	607b      	str	r3, [r7, #4]
 8000098:	e002      	b.n	80000a0 <main+0x3c>
 800009a:	687b      	ldr	r3, [r7, #4]
 800009c:	3301      	adds	r3, #1
 800009e:	607b      	str	r3, [r7, #4]
 80000a0:	687a      	ldr	r2, [r7, #4]
 80000a2:	683b      	ldr	r3, [r7, #0]
 80000a4:	429a      	cmp	r2, r3
 80000a6:	d3f8      	bcc.n	800009a <main+0x36>
		GPIOA->BSRR  = 1<<5;
 80000a8:	23a0      	movs	r3, #160	; 0xa0
 80000aa:	05db      	lsls	r3, r3, #23
 80000ac:	2220      	movs	r2, #32
 80000ae:	619a      	str	r2, [r3, #24]
		for (count = 0; count < count_max; count++);	// delay
 80000b0:	2300      	movs	r3, #0
 80000b2:	607b      	str	r3, [r7, #4]
 80000b4:	e002      	b.n	80000bc <main+0x58>
 80000b6:	687b      	ldr	r3, [r7, #4]
 80000b8:	3301      	adds	r3, #1
 80000ba:	607b      	str	r3, [r7, #4]
 80000bc:	687a      	ldr	r2, [r7, #4]
 80000be:	683b      	ldr	r3, [r7, #0]
 80000c0:	429a      	cmp	r2, r3
 80000c2:	d3f8      	bcc.n	80000b6 <main+0x52>
		GPIOA->BRR  = 1<<5;
 80000c4:	23a0      	movs	r3, #160	; 0xa0
 80000c6:	05db      	lsls	r3, r3, #23
 80000c8:	2220      	movs	r2, #32
 80000ca:	629a      	str	r2, [r3, #40]	; 0x28
		for (count = 0; count < count_max; count++);	// delay
 80000cc:	e7e2      	b.n	8000094 <main+0x30>
 80000ce:	46c0      	nop			; (mov r8, r8)
 80000d0:	0000c350 	.word	0x0000c350
 80000d4:	02dc6c00 	.word	0x02dc6c00
 80000d8:	007a1200 	.word	0x007a1200
 80000dc:	fffff3ff 	.word	0xfffff3ff

080000e0 <pll_start>:
*
* \return real frequency that was set
*//*-------------------------------------------------------------------------*/

static uint32_t pll_start(uint32_t crystal, uint32_t frequency)
{
 80000e0:	b580      	push	{r7, lr}
 80000e2:	b082      	sub	sp, #8
 80000e4:	af00      	add	r7, sp, #0
 80000e6:	6078      	str	r0, [r7, #4]
 80000e8:	6039      	str	r1, [r7, #0]
		return frequency;
 80000ea:	683b      	ldr	r3, [r7, #0]
}
 80000ec:	0018      	movs	r0, r3
 80000ee:	46bd      	mov	sp, r7
 80000f0:	b002      	add	sp, #8
 80000f2:	bd80      	pop	{r7, pc}

080000f4 <system_init>:
* \brief Initializes system.
* \details Enables clock for IO configuration block.
*//*-------------------------------------------------------------------------*/

static void system_init(void)
{
 80000f4:	b580      	push	{r7, lr}
 80000f6:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 80000f8:	4b04      	ldr	r3, [pc, #16]	; (800010c <system_init+0x18>)
 80000fa:	4a04      	ldr	r2, [pc, #16]	; (800010c <system_init+0x18>)
 80000fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80000fe:	2101      	movs	r1, #1
 8000100:	430a      	orrs	r2, r1
 8000102:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000104:	46c0      	nop			; (mov r8, r8)
 8000106:	46bd      	mov	sp, r7
 8000108:	bd80      	pop	{r7, pc}
 800010a:	46c0      	nop			; (mov r8, r8)
 800010c:	40021000 	.word	0x40021000
